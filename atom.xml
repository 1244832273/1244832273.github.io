<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>越努力越幸运</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://1244832273.github.io/"/>
  <updated>2020-08-03T02:24:04.599Z</updated>
  <id>https://1244832273.github.io/</id>
  
  <author>
    <name>鲁田文</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双向链表</title>
    <link href="https://1244832273.github.io/2020/07/27/js6/"/>
    <id>https://1244832273.github.io/2020/07/27/js6/</id>
    <published>2020-07-27T05:00:00.000Z</published>
    <updated>2020-08-03T02:24:04.599Z</updated>
    
    <content type="html"><![CDATA[<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>​        链表有多种不同的类型，这一节介绍双向链表。双向链表和普通链表的区别在于，在链表中， 一个节点只有链向下一个节点的链接，而在双向链表中，链接是双向的：一个链向下一个元素， 另一个链向前一个元素，如下图所示： </p><p><img src="/images/js6-1.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js6-1.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    &#125;; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> tail = <span class="literal">null</span>; <span class="comment">//新增的 </span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//这里是方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在代码中可以看到，LinkedList类和DoublyLinkedList类之间的区别标为新增的。在 Node类里有prev属性（一个新指针），在DoublyLinkedList类里也有用来保存对列表最后一 项的引用的tail属性</p><p>​        双向链表提供了两种迭代列表的方法：从头到尾，或者反过来。我们也可以访问一个特定节 点的下一个或前一个元素。在单向链表中，如果迭代列表时错过了要找的元素，就需要回到列表 起点，重新开始迭代。这是双向链表的一个优点</p><h5 id="在任意位置插入一个新元素"><a href="#在任意位置插入一个新元素" class="headerlink" title="在任意位置插入一个新元素"></a>在任意位置插入一个新元素</h5><p>​        向双向链表中插入一个新项跟（单向）链表非常类似。区别在于，链表只要控制一个next 指针，而双向链表则要同时控制next和prev（previous，前一个）这两个指针。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123; </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current = head,</span><br><span class="line">            previous,</span><br><span class="line">            index = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//在第一个位置添加 </span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (!head)&#123; <span class="comment">//新增的 &#123;1&#125;</span></span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.next = current;</span><br><span class="line">                current.prev = node; <span class="comment">//新增的 &#123;2&#125;</span></span><br><span class="line">                head = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (position === length) &#123; <span class="comment">//最后一项 //新增的 </span></span><br><span class="line"> </span><br><span class="line">            current = tail; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">            current.next = node;</span><br><span class="line">            node.prev = current; </span><br><span class="line">            tail = node; </span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position)&#123; <span class="comment">//&#123;4&#125;</span></span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next = current; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">            previous.next = node; </span><br><span class="line"> </span><br><span class="line">            current.prev = node; <span class="comment">//新增的</span></span><br><span class="line">            node.prev = previous; <span class="comment">//新增的</span></span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        length++; <span class="comment">//更新列表的长度 </span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        我们来分析第一种场景：在列表的第一个位置（列表的起点）插入一个新元素。如果列表为 空（行{1}），只需要把head和tail都指向这个新节点。如果不为空，current变量将是对列表 中第一个元素的引用。就像我们在链表中所做的，把node.next设为current，而head将指向 node（它将成为列表中的第一个元素）。不同之处在于，我们还需要为指向上一个元素的指针设 一个值。current.prev指针将由指向null变为指向新元素（node——行{2}）。node.prev指 针已经是null，因此不需要再更新任何东西</p><p>下图演示了这个过程： </p><p><img src="/images/js6-2.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js6-2.png" alt=""></p><p>​        现在来分析一下，假如我们要在列表最后添加一个新元素。这是一个特殊情况，因为我们还 控制着指向最后一个元素的指针（tail）。current变量将引用最后一个元素（行{3}）。然后开 始建立第一个链接：node.prev将引用current。current.next指针（指向null）将指向node （由于构造函数，node.next已经指向了null）。然后只剩一件事了，就是更新tail，它将由指 向current变为指向node。</p><p>下图展示了这些行为： </p><p><img src="/images/js6-3.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js6-3.png" alt=""></p><p>然后还有第三种场景：在列表中间插入一个新元素。就像我们在之前的方法中所做的，迭代 列表，直到到达要找的位置（行{4}）。我们将在current和previous元素之间插入新元素。首 先，node.next将指向current（行{5}），而previous.next将指向node，这样就不会丢失节 点之间的链接。然后需要处理所有的链接：current.prev将指向node，而node.prev将指向 previous。</p><p>下图展示了这一过程： </p><p><img src="/images/js6-4.png" alt=""></p><p> <img src="E:\1244832273.github.io\themes\next\source\images\js6-4.png" alt=""></p><p><code>我们可以对insert和remove这两个方法的实现做一些改进。在结果为否的 情况下，我们可以把元素插入到列表的尾部。性能也可以有所改进，比如，如果 position大于length/2，就最好从尾部开始迭代，而不是从头开始（这样就 能迭代更少列表中的元素）。</code> </p><h5 id="从任意位置移除元素"><a href="#从任意位置移除元素" class="headerlink" title="从任意位置移除元素"></a>从任意位置移除元素</h5><p>​        从双向链表中移除元素跟链表非常类似。唯一的区别就是还需要设置前一个位置的指针。我 们来看一下它的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; length)&#123;</span><br><span class="line">    <span class="keyword">var</span> current = head, </span><br><span class="line">     previous,</span><br><span class="line">         index = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//移除第一项</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; </span><br><span class="line"> </span><br><span class="line">            head = current.next; <span class="comment">// &#123;1&#125; </span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//如果只有一项，更新tail //新增的</span></span><br><span class="line">            <span class="keyword">if</span> (length === <span class="number">1</span>)&#123; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">            tail = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head.prev = <span class="literal">null</span>; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === length<span class="number">-1</span>)&#123; <span class="comment">//最后一项 //新增的 </span></span><br><span class="line"> </span><br><span class="line">            current = tail; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">            tail = current.prev;</span><br><span class="line">            tail.next = <span class="literal">null</span>; </span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position)&#123; <span class="comment">// &#123;5&#125; </span></span><br><span class="line"> </span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将previous与current的下一项链接起来——跳过current</span></span><br><span class="line">            previous.next = current.next; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">            current.next.prev = previous; <span class="comment">//新增的</span></span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        length--; </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> current.element; </span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        我们需要处理三种场景：从头部、从中间和从尾部移除一个元素</p><p>​        我们来看看如何移除第一个元素。current变量是对列表中第一个元素的引用，也就是我 们想移除的元素。需要做的就是改变head的引用，将其从current改为下一个元素 （current.next——行{1}）。但我们还需要更新current.next指向上一个元素的指针（因为 第一个元素的prev指针是null）。因此，把head.prev的引用改为null（行{3}——因为head 也指向列表中新的第一个元素，或者也可以用current.next.prev）。由于还需要控制tail 的引用，我们可以检查要移除的元素是否是第一个元素，如果是，只需要把tail也设为null（行{2}）。 </p><p><img src="/images/js6-6.png" alt=""></p><pre><code>下一种场景是从最后一个位置移除元素。既然已经有了对最后一个元素的引用（tail），我 们就不需要为找到它而迭代列表。这样我们也就可以把tail的引用赋给current变量（行{4}）。 接下来，需要把tail的引用更新为列表中倒数第二个元素（current.prev，或者tail.prev 也可以）。既然tail指向了倒数第二个元素，我们就只需要把next指针更新为null（tail.next = null）。</code></pre><p>下图演示了这一行为： </p><p><img src="/images/js6-7.png" alt=""></p><p>​        第三种也是最后一种场景：从列表中间移除一个元素。首先需要迭代列表，直到到达要找的 位置（行{5}）。current变量所引用的就是要移除的元素。那么要移除它，我们可以通过更新 previous.next和current.next.prev的引用，在列表中跳过它。因此，previous.next将 指向current.next，而current.next.prev将指向previous，</p><p>如下图所示</p><p><img src="/images/js6-8.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js6-8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      学习JavaScript数据结构与算法
    
    </summary>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/categories/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="https://1244832273.github.io/tags/JavaScript/"/>
    
      <category term="数据结构与算法" scheme="https://1244832273.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/tags/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://1244832273.github.io/2020/07/27/js5/"/>
    <id>https://1244832273.github.io/2020/07/27/js5/</id>
    <published>2020-07-27T03:00:00.000Z</published>
    <updated>2020-08-03T02:23:22.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-什么是链表"><a href="#1-什么是链表" class="headerlink" title="1.什么是链表"></a>1.什么是链表</h4><p>​        链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。下图展 示了一个链表的结构： </p><p><img src="/images/js5-4.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-4.png" alt=""></p><p>​        相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。</p><p>​        有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。下图演示了一列火车。每节车皮都是列表的元素，车皮间的连接就是指针： </p><p><img src="/images/js5-5.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-5.png" alt=""></p><h4 id="2-创建一个链表"><a href="#2-创建一个链表" class="headerlink" title="2.创建一个链表"></a>2.创建一个链表</h4><p>​        理解了链表是什么之后，现在就要开始实现我们的数据结构了。以下是我们的LinkedList 类的骨架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; <span class="comment">// &#123;1&#125;         </span></span><br><span class="line">        <span class="keyword">this</span>.element = element;         </span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;    <span class="comment">// next默认指向null</span></span><br><span class="line">    &#125;; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">0</span>; <span class="comment">// &#123;2&#125;     </span></span><br><span class="line">    <span class="keyword">var</span> head = <span class="literal">null</span>; <span class="comment">// &#123;3&#125; </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;&#125;;        </span><br><span class="line">    <span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;     </span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; &#125;</span><br></pre></td></tr></table></figure><p>​        LinkedList数据结构还需要一个Node辅助类（行{1}）。Node类表示要加入列表的项。它 包含一个element属性，即要添加到列表的值，以及一个next属性，即指向列表中下一个节点 项的指针。</p><p>​    LinkedList类也有存储列表项的数量的length属性（内部/私有变量）（行{2}）。 </p><p>​        另一个重要的点是，我们还需要存储第一个节点的引用。为此，可以把这个引用存储在一个 称为head的变量中（行{3}）。 </p><p>然后就是LinkedList类的方法。在实现这些方法之前，先来看看它们的职责。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> append(element)：向列表尾部添加一个新的项。</span><br><span class="line"> insert(position, element)：向列表的特定位置插入一个新的项</span><br><span class="line"> remove(element)：从列表中移除一项。</span><br><span class="line"> indexOf(element)：返回元素在列表中的索引。如果列表中没有该元素则返回<span class="number">-1</span>。</span><br><span class="line"> removeAt(position)：从列表的特定位置移除一项。</span><br><span class="line"> isEmpty()：如果链表中不包含任何元素，返回<span class="literal">true</span>，如果链表长度大于<span class="number">0</span>则返回<span class="literal">false</span>。</span><br><span class="line"> size()：返回链表包含的元素个数。与数组的length属性类似。</span><br><span class="line"> toString()：由于列表项使用了Node类，就需要重写继承自JavaScript对象默认的 toString方法，让其只输出元素的值</span><br></pre></td></tr></table></figure><h5 id="向链表尾部追加元素"><a href="#向链表尾部追加元素" class="headerlink" title="向链表尾部追加元素"></a>向链表尾部追加元素</h5><p>​        向LinkedList对象尾部添加一个元素时，可能有两种场景：列表为空，添加的是第一个元 素，或者列表不为空，向其追加元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element), <span class="comment">//&#123;1&#125;</span></span><br><span class="line">        current; <span class="comment">//&#123;2&#125; </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//列表中第一个节点 //&#123;3&#125;</span></span><br><span class="line">        head = node; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        current = head; <span class="comment">//&#123;4&#125; </span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//循环列表，直到找到最后一项</span></span><br><span class="line">        <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//找到最后一项，将其next赋为node，建立链接</span></span><br><span class="line">        current.next = node; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    length++; <span class="comment">//更新列表的长度 //&#123;6&#125; </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先需要做的是把element作为值传入，创建Node项（行{1}）。<br>先来实现第一个场景：向为空的列表添加一个元素。当我们创建一个LinkedList对象时， head会指向null：</p><p><img src="/images/js5-6.png" alt=""></p><p>​    </p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-6.png" alt=""></p><p>如果head元素为null（列表为空——行{3}），就意味着在向列表添加第一个元素。因此要 做的就是让head元素指向node元素。下一个node元素将会自动成为null</p><p>好了，我们已经说完了第一种场景。再来看看第二个，也就是向一个不为空的列表尾部添加 元素。 </p><p>​        要向列表的尾部添加一个元素，首先需要找到最后一个元素。记住，我们只有第一个元素的 引用（行{4}），因此需要循环访问列表，直到找到最后一项。为此，我们需要一个指向列表中 current项的变量（行{2}）。循环访问列表时，当current.next元素为null时，我们就知道 已经到达列表尾部了。然后要做的就是让当前（也就是最后一个）元素的next指针指向想要添 加到列表的节点（行{5}）。</p><p>下图展示了这个行为： </p><p><img src="/images/js5-7.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-7.png" alt=""></p><p>而当一个Node元素被创建时，它的next指针总是null。这没问题，因为我们知道它会是列 表的最后一项。<br>当然，别忘了递增列表的长度，这样就能控制它，轻松地得到列表的长度（行{6}）。</p><p> 我们可以通过以下代码来使用和测试目前创建的数据结构： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list.append(<span class="number">15</span>);</span><br><span class="line">list.append(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h5 id="从链表中移除元素"><a href="#从链表中移除元素" class="headerlink" title="从链表中移除元素"></a>从链表中移除元素</h5><p>​        现在，让我们看看如何从LinkedList对象中移除元素。移除元素也有两种场景：第一种是移 除第一个元素，第二种是移除第一个以外的任一元素。我们要实现两种remove方法：第一种是从 特定位置移除一个元素，第二种是根据元素的值移除元素（稍后我们会展示第二种remove方法）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; length)&#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        <span class="keyword">var</span> current = head, <span class="comment">// &#123;2&#125;</span></span><br><span class="line">            previous, <span class="comment">// &#123;3&#125;</span></span><br><span class="line">            index = <span class="number">0</span>; <span class="comment">// &#123;4&#125; </span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//移除第一项</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">            head = current.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position)&#123; <span class="comment">// &#123;6&#125; </span></span><br><span class="line"> </span><br><span class="line">                previous = current;     <span class="comment">// &#123;7&#125;</span></span><br><span class="line">                current = current.next; <span class="comment">// &#123;8&#125;</span></span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将previous与current的下一项链接起来：跳过current，从而移除它</span></span><br><span class="line">            previous.next = current.next; <span class="comment">// &#123;9&#125;</span></span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        length--; <span class="comment">// &#123;10&#125; </span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> current.element; </span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// &#123;11&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        一步一步来看这段代码。该方法要得到需要移除的元素的位置，就需要验证这个位置是有效 的（行{1}）。从0（包括0）到列表的长度（size – 1，因为索引是从零开始的）都是有效的位 置。如果不是有效的位置，就返回null（意即没有从列表中移除元素）。 </p><p>​        一起来为第一种场景编写代码：我们要从列表中移除第一个元素（position === 0——行 {5}）。下图展示了这个过程： </p><p><img src="/images/js5-8.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-8.png" alt=""></p><p>​        因此，如果想移除第一个元素，要做的就是让head指向列表的第二个元素。我们将用 current变量创建一个对列表中第一个元素的引用（行{2}——我们还会用它来迭代列表，但稍 等一下再说）。这样current变量就是对列表中第一个元素的引用。如果把head赋为 current.next，就会移除第一个元素。 </p><p>​        现在，假设我们要移除列表的最后一项或者中间某一项。为此，需要依靠一个细节来迭代列 表，直到到达目标位置（行{6}——我们会使用一个用于内部控制和递增的index变量）：current 变量总是为对所循环列表的当前元素的引用（行{8}）。我们还需要一个对当前元素的前一个元 素的引用（行{7}）；它被命名为previous（行{3}）</p><p>​        因此，要从列表中移除当前元素，要做的就是将previous.next和current.next链接起 来（行{9}）。这样，当前元素就会被丢弃在计算机内存中，等着被垃圾回收器清除。 </p><p>​        我们试着通过一些图表来更好地理解。首先考虑移除最后一个元素：</p><p><img src="/images/js5-9.png" alt=""> </p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-9.png" alt=""></p><p>​        对于最后一个元素，当我们在行{6}跳出循环时，current变量将是对列表中最后一个元素 的引用（要移除的元素）。current.next的值将是null（因为它是最后一个元素）。由于还保留 了对previous元素的引用（当前元素的前一个元素） ，previous.next就指向了current。那 么要移除current，要做的就是把previous.next的值改变为current.next</p><p>​        现在来看看，对于列表中间的元素是否可以应用相同的逻辑： </p><p><img src="/images/js5-10.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-10.png" alt=""></p><p>​        current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。因此， 我们的逻辑对这两种情况都管用</p><h5 id="在任意位置插入一个元素"><a href="#在任意位置插入一个元素" class="headerlink" title="在任意位置插入一个元素"></a>在任意位置插入一个元素</h5><p>我们要实现insert方法。使用这个方法可以在任意位置插入一个元素。我们来看 一看它的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123; <span class="comment">//&#123;1&#125; </span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current = head,</span><br><span class="line">            previous,</span><br><span class="line">            index = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//在第一个位置添加 </span></span><br><span class="line"> </span><br><span class="line">            node.next = current; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">            head = node; </span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position)&#123; <span class="comment">//&#123;3&#125;</span></span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;             </span><br><span class="line">            node.next = current; <span class="comment">//&#123;4&#125;</span></span><br><span class="line">            previous.next = node; <span class="comment">//&#123;5&#125;         &#125; </span></span><br><span class="line"> </span><br><span class="line">        length++; <span class="comment">//更新列表的长度 </span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//&#123;6&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        由于我们处理的是位置，就需要检查越界值（行{1}，跟remove方法类似）。如果越界了， 就返回false值，表示没有添加项到列表中（行{6}）。</p><p>​        现在我们要处理不同的场景。第一种场景，需要在列表的起点添加一个元素，也就是第一个 位置。下图展示了这种场景 </p><p><img src="/images/js5-11.png" alt=""></p><p>​    <img src="E:\1244832273.github.io\themes\next\source\images\js5-11.png" alt=""></p><p>​        current变量是对列表中第一个元素的引用。我们需要做的是把node.next的值设为 current（列表中第一个元素）。现在head和node.next都指向了current。接下来要做的就是 把head的引用改为node（行{2}），这样列表中就有了一个新元素.</p><p>​        现在来处理第二种场景：在列表中间或尾部添加一个元素。首先，我们需要循环访问列表， 找到目标位置（行{3}）。当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用，而previous将是对想要插入新元素的位置之前一个元素的引用。在这种情况下， 我们要在previous和current之间添加新项。因此，首先需要把新项（node）和当前项链接起 来（行{4}），然后需要改变previous和current之间的链接。我们还需要让previous.next 指向node（行{5}）。 </p><p><img src="/images/js5-12.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-12.png" alt=""></p><p>​        如果我们试图向最后一个位置添加一个新元素，previous将是对列表最后一项的引用，而 current将是null。在这种情况下，node.next将指向current，而previous.next将指向 node，这样列表中就有了一个新的项。 </p><p>现在来看看如何向列表中间添加一个新元素： </p><p><img src="/images/js5-13.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-13.png" alt=""></p><p>​        在这种情况下，我们试图将新的项（node）插入到previous和current元素之间。首先， 我们需要把node.next的值指向current。然后把previous.next的值设为node。这样列表中 就有了一个新的项。 </p>]]></content>
    
    <summary type="html">
    
      学习JavaScript数据结构与算法
    
    </summary>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/categories/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="https://1244832273.github.io/tags/JavaScript/"/>
    
      <category term="数据结构与算法" scheme="https://1244832273.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/tags/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://1244832273.github.io/2020/07/22/js4/"/>
    <id>https://1244832273.github.io/2020/07/22/js4/</id>
    <published>2020-07-22T07:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.367Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h4><p>我们已经学习了栈。队列和栈非常类似，但是使用了不同的原则，而非后进先出。你将在这 一章学习这些内容。 </p><p>队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。 队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。 </p><p>在现实中，最常见的队列的例子就是排队：</p><p><img src="/images/js4-1.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js4-1.png" alt=""></p><h4 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h4><p>先从最基本的声明类开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Queue() &#123;</span><br><span class="line"> &#x2F;&#x2F;这里是属性和方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来需要声明一些队列可用的方法。</p><p>  enqueue(element(s))：向队列尾部添加一个（或多个）新的项。 </p><p> dequeue()：移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。 </p><p> front()：返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不 做任何变动（不移除元素，只返回元素信息——与Stack类的peek方法非常类似）。 </p><p> isEmpty()：如果队列中不包含任何元素，返回true，否则返回false。  size()：返回队列包含的元素个数，与数组的length属性类似。</p><p>首先要实现的是enqueue方法。这个方法负责向队列添加新元素。这里有一个非常重要的细 节，新的项只能添加到队列末尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.enqueue &#x3D; function(element)&#123;</span><br><span class="line"> items.push(element);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来要实现dequeue方法。这个方法负责从队列移除项。由于队列遵循先进先出原则，最先 添加的项也是最先被移除的。可以用介绍过的JavaScript的array类的shift方法。如果你 不记得了，这里帮你回忆一下，shift方法会从数组中移除存储在索引0（第一个位置）的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.dequeue &#x3D; function()&#123;</span><br><span class="line"> return items.shift();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只有enqueue方法和dequeue方法可以添加和移除元素，这样就确保了Queue类遵循先进先 出原则。</p><h5 id="完整的Queue类"><a href="#完整的Queue类" class="headerlink" title="完整的Queue类"></a>完整的Queue类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function Queue() &#123;</span><br><span class="line"> var items &#x3D; [];</span><br><span class="line"> &#x2F;&#x2F; 添加在末尾</span><br><span class="line"> this.enqueue &#x3D; function(element)&#123;</span><br><span class="line"> items.push(element);</span><br><span class="line"> &#125;;</span><br><span class="line"> &#x2F;&#x2F; 删除在头部</span><br><span class="line"> this.dequeue &#x3D; function()&#123;</span><br><span class="line"> return items.shift();</span><br><span class="line"> &#125;;</span><br><span class="line"> &#x2F;&#x2F; 返回第一个</span><br><span class="line"> this.front &#x3D; function()&#123;</span><br><span class="line"> return items[0];</span><br><span class="line"> &#125;;</span><br><span class="line"> this.isEmpty &#x3D; function()&#123;</span><br><span class="line"> return items.length &#x3D;&#x3D; 0;</span><br><span class="line"> &#125;;</span><br><span class="line"> this.clear &#x3D; function()&#123;</span><br><span class="line"> items &#x3D; [];</span><br><span class="line"> &#125;;</span><br><span class="line"> this.size &#x3D; function()&#123;</span><br><span class="line"> return items.length;</span><br><span class="line"> &#125;; </span><br><span class="line"> this.print &#x3D; function()&#123;</span><br><span class="line"> console.log(items.toString());</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图展示了目前为止执行的所有入列操作，以及队列当前的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queue.print();</span><br><span class="line">console.log(queue.size()); &#x2F;&#x2F;输出3</span><br><span class="line">console.log(queue.isEmpty()); &#x2F;&#x2F;输出false</span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.print();</span><br></pre></td></tr></table></figure><p><img src="/images/js4-2.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js4-2.png" alt=""></p><p>然后，出列两个元素（执行两次dequeue方法）。下图展示了dequeue方法的执行过程：</p><p><img src="/images/js5-3.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-3.png" alt=""></p><p>最后，再次打印队列内容时，就只剩Camila一个元素了。前两个入列的元素出列了，最后 入列的元素也将是最后出列的。也就是说，我们遵循了先进先出原则。</p><h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><p>元素的添加和移除是基于优先级的。一个现实的例子就是机 场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或 带小孩的妇女）登机时也享有高于其他乘客的优先级。</p><p>实现一个优先队列，有两种选项：</p><p>设置优先级，然后在正确的位置添加元素；</p><p>或者用入列操 作添加元素，然后按照优先级移除它们。</p><p>在这个示例中，我们将会在正确的位置添加元素，因此 可以对它们使用默认的出列操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function PriorityQueue() &#123;</span><br><span class="line"> var items &#x3D; [];</span><br><span class="line"> function QueueElement (element, priority)&#123; &#x2F;&#x2F; &#123;1&#125;优先级类</span><br><span class="line"> this.element &#x3D; element;</span><br><span class="line"> this.priority &#x3D; priority;</span><br><span class="line"> &#125;</span><br><span class="line"> this.enqueue &#x3D; function(element, priority)&#123; &#x2F;&#x2F; 根据优先级来插入而不是简单的push</span><br><span class="line"> var queueElement &#x3D; new QueueElement(element, priority);</span><br><span class="line"> if (this.isEmpty())&#123; &#x2F;&#x2F; 如果数组是空的不需要比较优先级直接push</span><br><span class="line">items.push(queueElement); &#x2F;&#x2F; &#123;2&#125;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">var added &#x3D; false; &#x2F;&#x2F; 根据这个值判断当前优先级是否比列表最大优先级还大</span><br><span class="line">for (var i&#x3D;0; i&lt;items.length; i++)&#123;</span><br><span class="line"> if (queueElement.priority &lt; items[i].priority)&#123;&#x2F;&#x2F; 当前优先级和列表每一个对比</span><br><span class="line"> items.splice(i,0,queueElement); &#x2F;&#x2F; &#123;3&#125;插入小于item优先级的前一项</span><br><span class="line"> added &#x3D; true;</span><br><span class="line"> break; &#x2F;&#x2F; &#123;4&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!added)&#123; &#x2F;&#x2F;&#123;5&#125; 比最大优先级还大直接push</span><br><span class="line">items.push(queueElement);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#x2F;&#x2F;其他方法和默认的Queue实现相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    默认的Queue类和PriorityQueue类实现上的区别是，要向PriorityQueue添加元素，需 要创建一个特殊的元素（行{1}）。这个元素包含了要添加到队列的元素（它可以是任意类型） 及其在队列中的优先级。</p><p>​    如果队列为空，可以直接将元素入列（行{2}）。否则，就需要比较该元素与其他元素的优 先级。当找到一个比要添加的元素的priority值更大（优先级更低）的项时，就把新元素插入 到它之前（根据这个逻辑，对于其他优先级相同，但是先添加到队列的元素，我们同样遵循先进 先出的原则）。要做到这一点，我们可以用JavaScript的array类的splice方法。 一旦找到priority值更大的元素，就插入新元素（行{3}）并终止队列循环（行{4}）。这样， 队列也就根据优先级排序了。</p><p>如果要添加元素的priority值大于任何已有的元素，把它添加到队列的末尾就行了（行 {5}）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var priorityQueue &#x3D; new PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(&quot;John&quot;, 2);</span><br><span class="line">priorityQueue.enqueue(&quot;Jack&quot;, 1);</span><br><span class="line">priorityQueue.enqueue(&quot;Camila&quot;, 1);</span><br><span class="line">priorityQueue.print();</span><br></pre></td></tr></table></figure><p>以上代码是一个使用PriorityQueue类的示例。在下图中可以看到每条命令的结果（以上 代码的结果）：</p><p><img src="/images/js5-1.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-1.png" alt=""></p><p>我们在这里实现的优先队列称为最小优先队列，因为优先级的值较小的元素被放置在队列最 前面（1代表更高的优先级）。最大优先队列则与之相反，把优先级的值较大的元素放置在队列最 前面。</p><h4 id="循环队列——击鼓传花"><a href="#循环队列——击鼓传花" class="headerlink" title="循环队列——击鼓传花"></a>循环队列——击鼓传花</h4><p>还有另一个修改版的队列实现，就是循环队列。循环队列的一个例子就是击鼓传花游戏（Hot Potato）。在这个游戏中，孩子们围成一个圆圈，把花尽快地传递给旁边的人。某一时刻传花停止， 这个时候花在谁手里，谁就退出圆圈结束游戏。重复这个过程，直到只剩一个孩子（胜者）。</p><p>在下面这个示例中，我们要实现一个模拟的击鼓传花游戏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function hotPotato (nameList, num)&#123;</span><br><span class="line"> var queue &#x3D; new Queue(); &#x2F;&#x2F; &#123;1&#125;</span><br><span class="line"> for (var i&#x3D;0; i&lt;nameList.length; i++)&#123;</span><br><span class="line"> queue.enqueue(nameList[i]); &#x2F;&#x2F; &#123;2&#125; 将list全部添加到队列中</span><br><span class="line"> &#125;</span><br><span class="line"> var eliminated &#x3D; &#39;&#39;;</span><br><span class="line"> while (queue.size() &gt; 1)&#123;</span><br><span class="line">     for (var i&#x3D;0; i&lt;num; i++)&#123;</span><br><span class="line">     queue.enqueue(queue.dequeue()); &#x2F;&#x2F; &#123;3&#125; 删除队列的第一个然后再添加到最后</span><br><span class="line">  &#125;</span><br><span class="line">     eliminated &#x3D; queue.dequeue();&#x2F;&#x2F; &#123;4&#125;删除并取出循环结束后的队列的第一个值</span><br><span class="line">     console.log(eliminated + &#39;在击鼓传花游戏中被淘汰。&#39;);</span><br><span class="line"> &#125;</span><br><span class="line"> return queue.dequeue();&#x2F;&#x2F; &#123;5&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var names &#x3D; [&#39;John&#39;,&#39;Jack&#39;,&#39;Camila&#39;,&#39;Ingrid&#39;,&#39;Carl&#39;];</span><br><span class="line">var winner &#x3D; hotPotato(names, 7);</span><br><span class="line">console.log(&#39;胜利者：&#39; + winner);</span><br></pre></td></tr></table></figure><p>实现一个模拟的击鼓传花游戏，要用到这一章开头实现的Queue类（行{1}）。我们会得到一 份名单，把里面的名字全都加入队列（行{2}）。给定一个数字，然后迭代队列。从队列开头移 除一项，再将其添加到队列末尾（行{3}），模拟击鼓传花（如果你把花传给了旁边的人，你被 淘汰的威胁立刻就解除了）。一旦传递次数达到给定的数字，拿着花的那个人就被淘汰了（从队 列中移除——行{4}）。最后只剩下一个人的时候，这个人就是胜者（行{5}）。</p><p>以上算法的输出如下：</p><p> Camila在击鼓传花游戏中被淘汰。</p><p> Jack在击鼓传花游戏中被淘汰。</p><p> Carl在击鼓传花游戏中被淘汰。</p><p> Ingrid在击鼓传花游戏中被淘汰。</p><p> 胜利者：John </p><p>下图模拟了这个输出过程：</p><p><img src="/images/js5-2.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js5-2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      学习JavaScript数据结构与算法
    
    </summary>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/categories/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="https://1244832273.github.io/tags/JavaScript/"/>
    
      <category term="数据结构与算法" scheme="https://1244832273.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/tags/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://1244832273.github.io/2020/07/22/js3/"/>
    <id>https://1244832273.github.io/2020/07/22/js3/</id>
    <published>2020-07-22T04:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.367Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h4><p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。 </p><p>例如，下图里的一摞书或者餐厅里堆放的盘子。</p><p><img src="/images/js3-2.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js3-2.png" alt=""></p><h4 id="栈的创建"><a href="#栈的创建" class="headerlink" title="栈的创建"></a>栈的创建</h4><p>我们将创建一个类来表示栈。让我们从基础开始，先声明这个类： function </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack() &#123; &#x2F;&#x2F;各种属性和方法的声明 &#125;</span><br></pre></td></tr></table></figure><p>首先，我们需要一种数据结构来保存栈里的元素。可以选择数组： var items = []; 接下来，要为我们的栈声明一些方法。</p><p>  push(element(s))：添加一个（或几个）新元素到栈顶。</p><p>  pop()：移除栈顶的元素，同时返回被移除的元素。 </p><p> peek()：返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）。 </p><p> isEmpty()：如果栈里没有任何元素就返回true，否则返回false。  clear()：移除栈里的所有元素。 </p><p> size()：返回栈里的元素个数。这个方法和数组的length属性很类似。 我们要实现的第一个方法是push。这个方法负责往栈里添加新元素，有一点很重要：该方 法只添加元素到栈顶，也就是栈的末尾。</p><p>push方法可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.push &#x3D; function(element)&#123;</span><br><span class="line"> items.push(element);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为我们使用了数组来保存栈里的元素，所以可以用上一章里学到的数组的push方法来实现。 接着，我们来实现pop方法。这个方法主要用来移除栈里的元素。栈遵从LIFO原则，因此移 出的是最后添加进去的元素。因此，我们可以用上一章讲数组时介绍的pop方法。</p><p>栈的pop方法 可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.pop &#x3D; function()&#123;</span><br><span class="line"> return items.pop();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只能用push和pop方法添加和删除栈中元素，这样一来，我们的栈自然就遵从了LIFO原则。 </p><p>现在，为我们的类实现一些额外的辅助方法。如果想知道栈里最后添加的元素是什么，可以 用peek方法。这个方法将返回栈顶的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.peek &#x3D; function()&#123;</span><br><span class="line"> return items[items.length-1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为类内部是用数组保存元素的，所以访问数组的最后一个元素可以用 length - 1：</p><p><img src="/images/js3-1.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js3-1.png" alt=""></p><p>在上图中，有一个包含三个元素的栈，因此内部数组的长度就是3。数组中最后一项的位置 是2，length - 1（31）正好是2。 </p><p>下一个要实现的方法是 isEmpty，如果栈为空的话将返回true，否则就返回false：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.isEmpty &#x3D; function()&#123;</span><br><span class="line"> return items.length &#x3D;&#x3D; 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="栈的全部代码"><a href="#栈的全部代码" class="headerlink" title="栈的全部代码"></a>栈的全部代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function Stack() &#123;</span><br><span class="line"> var items &#x3D; [];</span><br><span class="line"> this.push &#x3D; function(element)&#123;</span><br><span class="line"> items.push(element);</span><br><span class="line"> &#125;;</span><br><span class="line"> this.pop &#x3D; function()&#123;</span><br><span class="line"> return items.pop();</span><br><span class="line"> &#125;;</span><br><span class="line"> this.peek &#x3D; function()&#123; &#x2F;&#x2F; 返回最后一位</span><br><span class="line"> return items[items.length-1];</span><br><span class="line"> &#125;;</span><br><span class="line"> this.isEmpty &#x3D; function()&#123;</span><br><span class="line"> return items.length &#x3D;&#x3D; 0;</span><br><span class="line"> &#125;;</span><br><span class="line"> this.size &#x3D; function()&#123;</span><br><span class="line"> return items.length;</span><br><span class="line"> &#125;;</span><br><span class="line"> this.clear &#x3D; function()&#123;</span><br><span class="line"> items &#x3D; [];</span><br><span class="line"> &#125;;</span><br><span class="line"> this.print &#x3D; function()&#123;</span><br><span class="line"> console.log(items.toString());</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从十进制到二进制"><a href="#从十进制到二进制" class="headerlink" title="从十进制到二进制"></a>从十进制到二进制</h4><p>现实生活中，我们主要使用十进制。但在计算科学中，二进制非常重要，因为计算机里的所 有内容都是用二进制数字表示的（0和1）。没有十进制和二进制相互转化的能力，与计算机交流 就很困难。 </p><p>要把十进制转化成二进制，我们可以将该十进制数字和2整除（二进制是满二进一），直到结 果是0为止。举个例子，把十进制的数字10转化成二进制的数字，过程大概是这样：</p><p><img src="/images/js3-3.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js3-3.png" alt=""></p><p>下面是对应的算法描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function divideBy2(decNumber)&#123;</span><br><span class="line"> var remStack &#x3D; new Stack(), &#x2F;&#x2F; new一个栈对象</span><br><span class="line"> rem,</span><br><span class="line"> binaryString &#x3D; &#39;&#39;;</span><br><span class="line"> while (decNumber &gt; 0)&#123; &#x2F;&#x2F;&#123;1&#125;判断取余后的值是否大于0</span><br><span class="line">     rem &#x3D; Math.floor(decNumber % 2); &#x2F;&#x2F;&#123;2&#125; 取余的值</span><br><span class="line">     remStack.push(rem); &#x2F;&#x2F;&#123;3&#125; </span><br><span class="line">     decNumber &#x3D; Math.floor(decNumber &#x2F; 2); &#x2F;&#x2F;&#123;4&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> while (!remStack.isEmpty())&#123; &#x2F;&#x2F;&#123;5&#125;利用栈的后进先出原则来输出取余后的值</span><br><span class="line"> binaryString +&#x3D; remStack.pop().toString();</span><br><span class="line"> &#125;</span><br><span class="line"> return binaryString;</span><br></pre></td></tr></table></figure><p>在这段代码里，当结果满足和2做整除的条件时（行{1}），我们会获得当前结果和2的余数， 放到栈里（行{2}、{3}）。然后让结果和2做整除（行{4}）。</p><p>另外请注意：JavaScript有数字类型， 但是它不会区分究竟是整数还是浮点数。</p><p>因此，要使用Math.floor函数让除法的操作仅返回整 数部分。最后，用pop方法把栈中的元素都移除，把出栈的元素变成连接成字符串（行{5}）。 </p><p>用刚才写的算法做一些测试，使用以下代码把结果输出到控制台里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(divideBy2(233)); &#x2F;&#x2F;输出11101001</span><br><span class="line">console.log(divideBy2(10)); &#x2F;&#x2F;输出1010</span><br><span class="line">console.log(divideBy2(1000)); &#x2F;&#x2F;输出1111101000</span><br></pre></td></tr></table></figure><p>我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和2整除 转成二进制数，还可以传入其他任意进制的基数为参数，</p><p>就像下面算法这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function baseConverter(decNumber, base)&#123;</span><br><span class="line"> var remStack &#x3D; new Stack(),</span><br><span class="line"> rem,</span><br><span class="line"> baseString &#x3D; &#39;&#39;,</span><br><span class="line"> digits &#x3D; &#39;0123456789ABCDEF&#39;; &#x2F;&#x2F;&#123;6&#125;</span><br><span class="line"> while (decNumber &gt; 0)&#123;</span><br><span class="line">     rem &#x3D; Math.floor(decNumber % base);</span><br><span class="line">     remStack.push(rem);</span><br><span class="line">     decNumber &#x3D; Math.floor(decNumber &#x2F; base);</span><br><span class="line"> &#125;</span><br><span class="line"> while (!remStack.isEmpty())&#123;</span><br><span class="line"> baseString +&#x3D; digits[remStack.pop()]; &#x2F;&#x2F;&#123;7&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return baseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要改变一个地方。在将十进制转成二进制时，余数是0或1；在将十进制转成八进制 时，余数是0到8之间的数；但是将十进制转成16进制时，余数是0到8之间的数字加上A、B、C、 D、E和F（对应10、11、12、13、14和15）。因此，我们需要对栈中的数字做个转化才可以（行 {6}和行{7}）。</p><p>可以使用之前的算法，输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(baseConverter(100345, 2)); &#x2F;&#x2F;输出11000011111111001</span><br><span class="line">console.log(baseConverter(100345, 8)); &#x2F;&#x2F;输出303771</span><br><span class="line">console.log(baseConverter(100345, 16)); &#x2F;&#x2F;输出187F9</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      学习JavaScript数据结构与算法
    
    </summary>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/categories/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="https://1244832273.github.io/tags/JavaScript/"/>
    
      <category term="数据结构与算法" scheme="https://1244832273.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/tags/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://1244832273.github.io/2020/07/21/js2/"/>
    <id>https://1244832273.github.io/2020/07/21/js2/</id>
    <published>2020-07-21T06:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.367Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>​    在数组中添加和删除元素也很容易，但有时也会很棘手。假如我们有一个数组<code>numbers</code>，初始化成了0到9。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let numbers &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br></pre></td></tr></table></figure><h5 id="在数组末尾插入元素"><a href="#在数组末尾插入元素" class="headerlink" title="在数组末尾插入元素"></a>在数组末尾插入元素</h5><p>如果想要给数组添加一个元素（比如<code>10</code>），只要把值赋给数组中最后一个空位上的元素即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers[numbers.length] &#x3D; 10;</span><br></pre></td></tr></table></figure><blockquote><p>在JavaScript中，数组是一个可以修改的对象。如果添加元素，它就会动态增长。在C和Java等其他语言里，我们要决定数组的大小，想添加元素就要创建一个全新的数组，不能简单地往其中添加所需的元素。</p></blockquote><h6 id="使用push方法"><a href="#使用push方法" class="headerlink" title="使用push方法"></a>使用push方法</h6><p>另外，还有一个<code>push</code>方法，能把元素添加到数组的末尾。通过<code>push</code>方法，我们能添加任意个元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers.push(11);</span><br><span class="line">numbers.push(12, 13);</span><br></pre></td></tr></table></figure><p>如果输出<code>numbers</code>的话，就会看到从0到13的值。</p><h5 id="在数组开头插入元素"><a href="#在数组开头插入元素" class="headerlink" title="在数组开头插入元素"></a>在数组开头插入元素</h5><p>现在，我们希望在数组中插入一个新元素（数-1），不像之前那样插入到最后，而是放到数组的开头。为了实现这个需求，首先要腾出数组里第一个元素的位置，把所有的元素向右移动一位。我们可以循环数组中的元素，从最后一位（长度值就是数组的末尾位置）开始，将对应的前一个元素（<code>i-1</code>）的值赋给它（<code>i</code>），依次处理，最后把我们想要的值赋给第一个位置（索引0）上。我们可以将这段逻辑写成一个函数，甚至将该方法直接添加在<code>Array</code>的原型上，使所有数组的实例都可以访问到该方法。下面的代码表现了这段逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.insertFirstPosition &#x3D; function(value) &#123;</span><br><span class="line">  for (let i &#x3D; this.length; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">    this[i] &#x3D; this[i - 1];</span><br><span class="line">  &#125;</span><br><span class="line">  this[0] &#x3D; value;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.insertFirstPosition(-1);</span><br></pre></td></tr></table></figure><p>下图描述了我们刚才的操作过程。</p><p><img src="/images/js2-1.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js2-1.png" alt=""></p><h6 id="使用unshift方法"><a href="#使用unshift方法" class="headerlink" title="使用unshift方法"></a>使用<code>unshift</code>方法</h6><p>在JavaScript里，数组有一个方法叫<code>unshift</code>，可以直接把数值插入数组的开头（此方法背后的逻辑和<code>insertFirstPosition</code>方法的行为是一样的）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers.unshift(-2);</span><br><span class="line">numbers.unshift(-4, -3);</span><br></pre></td></tr></table></figure><p>那么，用<code>unshift</code>方法，我们就可以在数组的开始处添加值-2，然后添加-3、-4等。这样数组就会输出数-4到13。</p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>目前为止，我们已经学习了如何给数组的开始和结尾位置添加元素。下面来看一下怎样从数组中删除元素。</p><h5 id="从数组末尾删除元素pop"><a href="#从数组末尾删除元素pop" class="headerlink" title="从数组末尾删除元素pop"></a>从数组末尾删除元素<code>pop</code></h5><p>要删除数组里最靠后的元素，可以用<code>pop</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.pop();</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>push</code>和<code>pop</code>方法，就能用数组来模拟栈，你将在下一章看到这部分内容。</p></blockquote><p>现在，数组输出的数是-4到12，数组的长度是17。</p><h5 id="从数组开头删除元素shift"><a href="#从数组开头删除元素shift" class="headerlink" title="从数组开头删除元素shift"></a>从数组开头删除元素shift</h5><p>如果要移除数组里的第一个元素，可以用下面的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i &#x3D; 0; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  numbers[i] &#x3D; numbers[i + 1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图呈现了这段代码的执行过程。</p><p><img src="/images/js2-2.png" alt=""></p><p><img src="E:\1244832273.github.io\themes\next\source\images\js2-2.png" alt=""></p><p>我们把数组里所有的元素都左移了一位，但数组的长度依然是17，这意味着数组中有额外的一个元素（值是<code>undefined</code>）。在最后一次循环里，<code>i+1</code>引用了数组里还未初始化的一个位置。在Java、C/C+或C#等一些语言里，这样写可能会抛出异常，因此不得不在<code>numbers.length- 1</code>处停止循环。</p><p>可以看到，我们只是把数组第一位的值用第二位覆盖了，并没有删除元素（因为数组的长度和之前还是一样的，并且多了一个未定义元素）。</p><p>要从数组中移除这个值，还可以创建一个包含刚才所讨论逻辑的方法，叫作<code>removeFirstPosition</code>。但是，要真正从数组中移除这个元素，我们需要创建一个新的数组，将所有不是<code>undefined</code>的值从原来的数组复制到新的数组中，并且将这个新的数组赋值给我们的数组。要完成这项工作，也可以像下面这样创建一个<code>reIndex</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.reIndex &#x3D; function(myArray) &#123;</span><br><span class="line">  const newArray &#x3D; [];</span><br><span class="line">  for(let i &#x3D; 0; i &lt; myArray.length; i++ ) &#123;</span><br><span class="line">    if (myArray[i] !&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(myArray[i]);</span><br><span class="line">      newArray.push(myArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 手动移除第一个元素并重新排序</span><br><span class="line">Array.prototype.removeFirstPosition &#x3D; function() &#123;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; this.length; i++) &#123;</span><br><span class="line">    this[i] &#x3D; this[i + 1];</span><br><span class="line">  &#125;</span><br><span class="line">  return this.reIndex(this);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">numbers &#x3D; numbers.removeFirstPosition();</span><br></pre></td></tr></table></figure><p><strong>使用<code>shift</code>方法</strong></p><p>要删除数组的第一个元素，可以用<code>shift</code>方法实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.shift();</span><br></pre></td></tr></table></figure><p>假如本来数组中的值是从-4到12，长度为17。执行了上述代码后，数组就只有-3到12了，长度也会减小到16。</p><h4 id="JavaScript的数组方法参考"><a href="#JavaScript的数组方法参考" class="headerlink" title="JavaScript的数组方法参考"></a>JavaScript的数组方法参考</h4><p>在JavaScript里，数组是经过改进的对象，这意味着创建的每个数组都有一些可用的方法。数组很有趣，因为它十分强大，并且相比其他语言中的数组，JavaScript中的数组有许多很好用的方法。这样就不用再为它开发一些基本功能了，例如在数据结构的中间添加或删除元素。</p><p>下表详述了数组的一些核心方法，其中的一些我们已经学习过了。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>concat</code></td><td style="text-align:left">连接2个或更多数组，并返回结果</td></tr><tr><td style="text-align:left"><code>every</code></td><td style="text-align:left">对数组中的每个元素运行给定函数，如果该函数对每个元素都返回<code>true</code>，则返回<code>true</code></td></tr><tr><td style="text-align:left"><code>filter</code></td><td style="text-align:left">对数组中的每个元素运行给定函数，返回该函数会返回<code>true</code>的元素组成的数组</td></tr><tr><td style="text-align:left"><code>forEach</code></td><td style="text-align:left">对数组中的每个元素运行给定函数。这个方法没有返回值</td></tr><tr><td style="text-align:left"><code>join</code></td><td style="text-align:left">将所有的数组元素连接成一个字符串</td></tr><tr><td style="text-align:left"><code>indexOf</code></td><td style="text-align:left">返回第一个与给定参数相等的数组元素的索引，没有找到则返回<code>-1</code></td></tr><tr><td style="text-align:left"><code>lastIndexOf</code></td><td style="text-align:left">返回在数组中搜索到的与给定参数相等的元素的索引里最大的值</td></tr><tr><td style="text-align:left"><code>map</code></td><td style="text-align:left">对数组中的每个元素运行给定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td style="text-align:left"><code>reverse</code></td><td style="text-align:left">颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个</td></tr><tr><td style="text-align:left"><code>slice</code></td><td style="text-align:left">传入索引值，将数组里对应索引范围内的元素作为新数组返回</td></tr><tr><td style="text-align:left"><code>some</code></td><td style="text-align:left">对数组中的每个元素运行给定函数，如果任一元素返回<code>true</code>，则返回<code>true</code></td></tr><tr><td style="text-align:left"><code>sort</code></td><td style="text-align:left">按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td></tr><tr><td style="text-align:left"><code>toString</code></td><td style="text-align:left">将数组作为字符串返回</td></tr><tr><td style="text-align:left"><code>valueOf</code></td><td style="text-align:left">和<code>toString</code>类似，将数组作为字符串返回</td></tr></tbody></table><p>我们已经学过了<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>和<code>splice</code>方法。</p><h6 id="使用reduce方法"><a href="#使用reduce方法" class="headerlink" title="使用reduce方法"></a><strong>使用<code>reduce</code>方法</strong></h6><p>最后是<code>reduce</code>方法。<code>reduce</code>方法接收一个有如下四个参数的函数：<code>previousValue</code>、<code>currentValue</code>、<code>index</code>和<code>array</code>。因为<code>index</code>和<code>array</code>是可选的参数，所以如果用不到它们的话，可以不传。这个函数会返回一个将被叠加到累加器的值，<code>reduce</code>方法停止执行后会返回这个累加器。如果要对一个数组中的所有元素求和，这就很有用。下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.reduce((previous, current) &#x3D;&gt; previous + current);</span><br></pre></td></tr></table></figure><p>输出将是<code>120</code></p><h4 id="ECMAScript-6和数组的新功能"><a href="#ECMAScript-6和数组的新功能" class="headerlink" title="ECMAScript 6和数组的新功能"></a>ECMAScript 6和数组的新功能</h4><p>第1章提到过，<strong>ECMAScript 2015</strong>（<strong>ES6</strong>或<strong>ES2015</strong>）和更新的规范（2015+）给JavaScript语言带来了新的功能。</p><p>下表列出了ES2015和ES2016新增的数组方法。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>@@iterator</code></td><td style="text-align:left">返回一个包含数组键值对的迭代器对象，可以通过同步调用得到数组元素的键值对</td></tr><tr><td style="text-align:left"><code>copyWithin</code></td><td style="text-align:left">复制数组中一系列元素到同一数组指定的起始位置</td></tr><tr><td style="text-align:left"><code>entries</code></td><td style="text-align:left">返回包含数组所有键值对的<code>@@iterator</code></td></tr><tr><td style="text-align:left"><code>includes</code></td><td style="text-align:left">如果数组中存在某个元素则返回<code>true</code>，否则返回<code>false</code>。E2016新增</td></tr><tr><td style="text-align:left"><code>find</code></td><td style="text-align:left">根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素</td></tr><tr><td style="text-align:left"><code>findIndex</code></td><td style="text-align:left">根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素在数组中的索引</td></tr><tr><td style="text-align:left"><code>fill</code></td><td style="text-align:left">用静态值填充数组</td></tr><tr><td style="text-align:left"><code>from</code></td><td style="text-align:left">根据已有数组创建一个新数组</td></tr><tr><td style="text-align:left"><code>keys</code></td><td style="text-align:left">返回包含数组所有索引的<code>@@iterator</code></td></tr><tr><td style="text-align:left"><code>of</code></td><td style="text-align:left">根据传入的参数创建一个新数组</td></tr><tr><td style="text-align:left"><code>values</code></td><td style="text-align:left">返回包含数组中所有值的<code>@@iterator</code></td></tr></tbody></table><p>除了这些新的方法，还有一种用<code>for...of</code>循环来迭代数组的新做法，以及可以从数组实例得到的迭代器对象。</p><h6 id="使用-iterator对象"><a href="#使用-iterator对象" class="headerlink" title="使用@@iterator对象"></a>使用<code>@@iterator</code>对象</h6><p>ES2015还为<code>Array</code>类增加了一个<code>@@iterator</code>属性，需要通过<code>Symbol.iterator</code>来访问。代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let iterator &#x3D; numbers[Symbol.iterator]();</span><br><span class="line">console.log(iterator.next().value); &#x2F;&#x2F; 1</span><br><span class="line">console.log(iterator.next().value); &#x2F;&#x2F; 2</span><br><span class="line">console.log(iterator.next().value); &#x2F;&#x2F; 3</span><br><span class="line">console.log(iterator.next().value); &#x2F;&#x2F; 4</span><br><span class="line">console.log(iterator.next().value); &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure><p>然后，不断调用迭代器的<code>next</code>方法，就能依次得到数组中的值。<code>numbers</code>数组中有15个值，因此需要调用15次<code>iterator.next().value</code>。</p><p>我们可以用下面的代码来输出<code>numbers</code>数组中的15个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iterator &#x3D; numbers[Symbol.iterator]();</span><br><span class="line">for (const n of iterator) &#123;</span><br><span class="line">  console.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组中的所有值都迭代完之后，<code>iterator.next().value</code>会返回<code>undefined</code>。</p><h4 id="排序元素"><a href="#排序元素" class="headerlink" title="排序元素"></a>排序元素</h4><p>通过本书，我们能学到如何编写最常用的搜索和排序算法。其实，JavaScript里也提供了一个排序方法和一组搜索方法。让我们来看看。</p><p>首先，我们想反序输出数组<code>numbers</code>（它本来的排序是<code>1, 2, 3, 4, ..., 15</code>）。要实现这样的功能，可以用<code>reverse</code>方法，然后数组内元素就会反序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.reverse();</span><br></pre></td></tr></table></figure><p>现在，输出<code>numbers</code>的话就会看到<code>[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code>。然后，我们使用<code>sort</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.sort();</span><br></pre></td></tr></table></figure><p>然而，如果输出数组，结果会是<code>[1, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 9]</code>。看起来不大对，是吧？这是因为<code>sort</code>方法在对数组做排序时，把元素默认成字符串进行相互比较。</p><p>我们可以传入自己写的比较函数。因为数组里都是数，所以可以像下面这样写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.sort((a, b) &#x3D;&gt; a - b);</span><br></pre></td></tr></table></figure><p>在<code>b</code>大于<code>a</code>时，这段代码会返回负数，反之则返回正数。如果相等的话，就会返回0。也就是说返回的是负数，就说明<code>a</code>比<code>b</code>小，这样<code>sort</code>就能根据返回值的情况对数组进行排序。</p><p>之前的代码也可以表示成如下这样，会更清晰一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function compare(a, b) &#123;</span><br><span class="line">  if (a &lt; b) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  if (a &gt; b) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; a必须等于b</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">numbers.sort(compare);</span><br></pre></td></tr></table></figure><p>这是因为JavaScript的<code>sort</code>方法接收<code>compareFunction</code>作为参数，然后<code>sort</code>会用它排序数组。在这个例子里，我们声明了一个用来比较数组元素的函数，使数组按升序排序。</p><h5 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h5><p>我们可以对任何对象类型的数组排序，也可以创建<code>compareFunction</code>来比较元素。例如，对象<code>Person</code>有名字和年龄属性，我们希望根据年龄排序，就可以这么写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const friends &#x3D; [</span><br><span class="line">  &#123; name: &#39;John&#39;, age: 30 &#125;,</span><br><span class="line">  &#123; name: &#39;Ana&#39;, age: 20 &#125;,</span><br><span class="line">  &#123; name: &#39;Chris&#39;, age: 25 &#125;, &#x2F;&#x2F; ES2017允许存在尾逗号</span><br><span class="line">];</span><br><span class="line">function comparePerson(a, b) &#123;</span><br><span class="line">  if (a.age &lt; b.age) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  if (a.age &gt; b.age) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">console.log(friends.sort(comparePerson));</span><br></pre></td></tr></table></figure><p>在这个例子里，最后会输出<code>Ana(20), Chris(25), John(30)</code>。</p><h5 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h5><p>假如有这样一个数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let names &#x3D; [&#39;Ana&#39;, &#39;ana&#39;, &#39;john&#39;, &#39;John&#39;];</span><br><span class="line">console.log(names.sort());</span><br></pre></td></tr></table></figure><p>你猜会输出什么？答案如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;Ana&quot;, &quot;John&quot;, &quot;ana&quot;, &quot;john&quot;]</span><br></pre></td></tr></table></figure><p>既然<code>a</code>在字母表里排第一位，为何<code>ana</code>却排在了<code>John</code>之后呢？这是因为JavaScript在做字符比较的时候，是根据字符对应的ASCII值来比较的。例如，<code>A</code>、<code>J</code>、<code>a</code>、<code>j</code>对应的ASCII值分别是<code>65</code>、<code>74</code>、<code>97</code>、<code>106</code>。</p><p>虽然<code>a</code>在字母表里是最靠前的，但<code>J</code>的ASCII值比<code>a</code>的小，所以排在了<code>a</code>前面。</p><p>现在，如果给<code>sort</code>传入一个忽略大小写的比较函数，将输出<code>[&quot;Ana&quot;, &quot;ana&quot;, &quot;John&quot;, &quot;john&quot;]</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names &#x3D; [&#39;Ana&#39;, &#39;ana&#39;, &#39;john&#39;, &#39;John&#39;]; &#x2F;&#x2F; 重置数组的初始状态</span><br><span class="line">console.log(names.sort((a, b) &#x3D;&gt; &#123;</span><br><span class="line">  if (a.toLowerCase() &lt; b.toLowerCase()) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  if (a.toLowerCase() &gt; b.toLowerCase()) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>在这种情况下，<code>sort</code>函数不会有任何作用。它会按照现在的大小写字母顺序排序。</p><p>如果希望小写字母排在前面，那么需要使用<code>localeCompare</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names.sort((a, b) &#x3D;&gt; a.localeCompare(b));</span><br></pre></td></tr></table></figure><p>输出结果将是<code>[&quot;ana&quot;, &quot;Ana&quot;, &quot;john&quot;, &quot;John&quot;]</code>。</p><p>假如对带有重音符号的字符做排序的话，也可以用<code>localeCompare</code>来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const names2 &#x3D; [&#39;Maève&#39;, &#39;Maeve&#39;];</span><br><span class="line">console.log(names2.sort((a, b) &#x3D;&gt; a.localeCompare(b)));</span><br></pre></td></tr></table></figure><p>最后输出的结果将是<code>[&quot;Maeve&quot;, &quot;Maève&quot;]</code>。</p>]]></content>
    
    <summary type="html">
    
      学习JavaScript数据结构与算法
    
    </summary>
    
      <category term="JavaScript" scheme="https://1244832273.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://1244832273.github.io/tags/JavaScript/"/>
    
      <category term="学习JavaScript数据结构与算法" scheme="https://1244832273.github.io/tags/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="https://1244832273.github.io/2020/07/21/moban/"/>
    <id>https://1244832273.github.io/2020/07/21/moban/</id>
    <published>2020-07-21T05:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.369Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#### &lt;/p&gt;

      
    
    </summary>
    
      <category term="默认分类" scheme="https://1244832273.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>js的==和===转换</title>
    <link href="https://1244832273.github.io/2020/07/21/js1/"/>
    <id>https://1244832273.github.io/2020/07/21/js1/</id>
    <published>2020-07-21T05:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相等运算符（-和-）"><a href="#相等运算符（-和-）" class="headerlink" title="相等运算符（==和===）"></a>相等运算符（<code>==</code>和<code>===</code>）</h3><p>这两个相等运算符的使用可能会引起一些困惑。</p><p>使用<code>==</code>时，不同类型的值也可以被看作相等。这样的结果可能会使那些资深的JavaScript开发者都感到困惑。我们用下面的表格给大家分析一下不同类型的值用相等运算符比较后的结果。</p><table><thead><tr><th>类型（<code>x</code>）</th><th>类型（<code>y</code>）</th><th>结果</th></tr></thead><tbody><tr><td><code>null</code></td><td><code>undefined</code></td><td><code>true</code></td></tr><tr><td><code>undefined</code></td><td><code>null</code></td><td><code>true</code></td></tr><tr><td>数</td><td>字符串</td><td><code>x == toNumber(y)</code></td></tr><tr><td>字符串</td><td>数</td><td><code>toNumber(x) == y</code></td></tr><tr><td>布尔值</td><td>任何类型</td><td><code>toNumber(x) == y</code></td></tr><tr><td>任何类型</td><td>布尔值</td><td><code>x == toNumber(y)</code></td></tr><tr><td>字符串或数</td><td>对象</td><td><code>x == toPrimitive(y)</code></td></tr><tr><td>对象</td><td>字符串或数</td><td><code>toPrimitive(x) == y</code></td></tr></tbody></table><p>如果<code>x</code>和<code>y</code>的类型相同，JavaScript会用<code>equals</code>方法比较这两个值或对象。没有列在这个表格中的其他情况都会返回<code>false</code>。</p><p><code>toNumber</code>和<code>toPrimitive</code>方法是内部的，并根据以下表格对其进行估值。</p><p><code>toNumber</code>方法对不同类型返回的结果如下。</p><table><thead><tr><th>值类型</th><th>结果</th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>NaN</code></td></tr><tr><td><code>null</code></td><td><code>+0</code></td></tr><tr><td>布尔值</td><td>如果是<code>true</code>，返回<code>1</code>；如果是<code>false</code>，返回<code>+0</code></td></tr><tr><td>数</td><td>数对应的值</td></tr></tbody></table><p><code>toPrimitive</code>方法对不同类型返回的结果如下。</p><table><thead><tr><th>值类型</th><th>结果</th></tr></thead><tbody><tr><td>对象</td><td>如果对象的<code>valueOf</code>方法的结果是原始值，返回原始值；如果对象的<code>toString</code>方法返回原始值，就返回这个值；其他情况都返回一个错误</td></tr></tbody></table><p>用例子来验证一下表格中的结果。首先，我们知道下面的代码输出<code>true</code>（字符串长度大于1）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;packt&#39; ? true : false);</span><br></pre></td></tr></table></figure><p>那么下面这行代码的结果呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;packt&#39; &#x3D;&#x3D; true);</span><br></pre></td></tr></table></figure><p>输出是<code>false</code>，为什么会这样呢？</p><ul><li>首先，布尔值会被<code>toNumber</code>方法转成数，因此得到<code>packt == 1</code>。</li><li>其次，用<code>toNumber</code>转换字符串值。因为字符串包含字母，所以会被转成<code>NaN</code>，表达式就变成了<code>NaN == 1</code>，结果就是<code>false</code>。</li></ul><p>那么下面这行代码的结果呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;packt&#39; &#x3D;&#x3D; false);</span><br></pre></td></tr></table></figure><p>输出也是<code>false</code>，为什么呢？</p><ul><li><p>首先，布尔值会被<code>toNumber</code>方法转成数，因此得到<code>packt == 0</code>。</p></li><li><p>其次，用<code>toNumber</code>转换字符串值。因为字符串包含字母，所以会被转成<code>NaN</code>，表达式就变成了<code>NaN == 0</code>，结果就是<code>false</code>。</p><p><code>nan和任何值包括自己都不相等</code></p></li></ul><p>那么<code>===</code>运算符呢？简单多了。如果比较的两个值类型不同，比较的结果就是<code>false</code>。如果比较的两个值类型相同，结果会根据下表判断。</p><table><thead><tr><th>类型（<code>x</code>）</th><th>值</th><th>结果</th></tr></thead><tbody><tr><td>数</td><td><code>x</code>和<code>y</code>的值相同（但不是<code>NaN</code>）</td><td><code>true</code></td></tr><tr><td>字符串</td><td><code>x</code>和<code>y</code>是相同的字符</td><td><code>true</code></td></tr><tr><td>布尔值</td><td><code>x</code>和<code>y</code>都是<code>true</code>或<code>false</code></td><td><code>true</code></td></tr><tr><td>对象</td><td><code>x</code>和<code>y</code>引用同一个对象</td><td><code>true</code></td></tr></tbody></table><p>如果<code>x</code>和<code>y</code>类型不同，结果就是<code>false</code>。我们来看一些例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;packt&#39; &#x3D;&#x3D;&#x3D; true); &#x2F;&#x2F; false</span><br><span class="line">console.log(&#39;packt&#39; &#x3D;&#x3D;&#x3D; &#39;packt&#39;); &#x2F;&#x2F; true</span><br><span class="line">var person1 &#x3D; &#123;name:&#39;John&#39;&#125;;</span><br><span class="line">var person2 &#x3D; &#123;name:&#39;John&#39;&#125;;</span><br><span class="line">console.log(person1 &#x3D;&#x3D;&#x3D; person2); &#x2F;&#x2F; false，不同的对象</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>​    <code>==的时候字符串会被toNumber进行类型转换，如果字符串是纯数字则转换成相应数字，否则会被转换成NaN</code></p>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="JavaScript" scheme="https://1244832273.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://1244832273.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>hexo多台电脑使用</title>
    <link href="https://1244832273.github.io/2020/07/21/hexoUse/"/>
    <id>https://1244832273.github.io/2020/07/21/hexoUse/</id>
    <published>2020-07-20T16:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.366Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、关于搭建的流程"><a href="#一、关于搭建的流程" class="headerlink" title="一、关于搭建的流程"></a>一、关于搭建的流程</h4><ol><li>创建仓库，<a href="https://link.zhihu.com/?target=http%3A//CrazyMilk.github.io">http://CrazyMilk.github.io</a>；</li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone <a href="mailto:git@github.com">git@github.com</a>:CrazyMilk/CrazyMilk.github.io.git拷贝仓库；</li><li>在本地<a href="https://link.zhihu.com/?target=http%3A//CrazyMilk.github.io">http://CrazyMilk.github.io</a>文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo g -d生成网站并部署到GitHub上。</li></ol><h4 id="二、关于日常的改动流程"><a href="#二、关于日常的改动流程" class="headerlink" title="二、关于日常的改动流程"></a>二、关于日常的改动流程</h4><ol><li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</li><li>然后才执行hexo g -d发布网站到master分支上。</li></ol><h4 id="三、本地资料丢失后的流程"><a href="#三、本地资料丢失后的流程" class="headerlink" title="三、本地资料丢失后的流程"></a>三、本地资料丢失后的流程</h4><ol><li>使用git clone <a href="mailto:git@github.com">git@github.com</a>:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）；</li><li>在本地新拷贝的<a href="https://link.zhihu.com/?target=http%3A//CrazyMilk.github.io">http://CrazyMilk.github.io</a>文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li></ol>]]></content>
    
    <summary type="html">
    
      来自 https://juejin.im/post/5acf22e6f265da23994eeac9   还有  https://www.zhihu.com/question/21193762
    
    </summary>
    
      <category term="奇淫技巧" scheme="https://1244832273.github.io/categories/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="https://1244832273.github.io/tags/hexo/"/>
    
      <category term="奇淫技巧" scheme="https://1244832273.github.io/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>hook原理</title>
    <link href="https://1244832273.github.io/2020/07/20/react_1/"/>
    <id>https://1244832273.github.io/2020/07/20/react_1/</id>
    <published>2020-07-20T05:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.369Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hoos使用可能产生的疑惑"><a href="#hoos使用可能产生的疑惑" class="headerlink" title="hoos使用可能产生的疑惑"></a>hoos使用可能产生的疑惑</h4><ol><li><p>为什么 useEffect 第二个参数是空数组，就相当于 ComponentDidMount ，只会执行一次？</p></li><li><p>为什么只能在函数的最外层调用 Hook，不能在循环、条件判断或者子函数中调用？</p></li><li><p>自定义的 Hook 是如何影响使用它的函数组件的？</p></li><li><p>Capture Value 特性是如何产生的？</p></li></ol><p><code>带着疑惑往下看</code></p><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p>最简单的 <code>useState</code> 用法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Counter() &#123;</span><br><span class="line">  var [count, setCount] &#x3D; useState(0);</span><br><span class="line"> </span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;count&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; &#123;setCount(count + 1)&#125;&#125;&gt;</span><br><span class="line">        点击</span><br><span class="line">      &lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于 <code>useState</code> 的用法, 我们尝试着自己实现一个 <code>useState</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function useState(initialValue) &#123;</span><br><span class="line">  var state &#x3D; initialValue;</span><br><span class="line">  function setState(newState) &#123;</span><br><span class="line">    state &#x3D; newState;</span><br><span class="line">    render();</span><br><span class="line">  &#125;</span><br><span class="line">  return [state, setState];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们发现，点击 Button 的时候，count 并<code>不会变化</code>。</p><p>为什么呢？我们没有存储 state，每次渲染 Counter 组件的时候，state 都是<code>新重置</code>的。</p><p>自然我们就能想到，把 state <code>提取出来</code>，存在 useState <code>外面</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var _state; &#x2F;&#x2F; 把 state 存储在外面</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">function useState(initialValue) &#123;</span><br><span class="line">  _state &#x3D; _state || initialValue; &#x2F;&#x2F; 如果没有 _state，说明是第一次执行，把 initialValue 复制给它</span><br><span class="line">  function setState(newState) &#123;</span><br><span class="line">    _state &#x3D; newState;</span><br><span class="line">    render();</span><br><span class="line">  &#125;</span><br><span class="line">  return [_state, setState];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>重新渲染组件的时候会读取全局对象的值，拿到的就是最新值了</code></p><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>useEffect 是另外一个基础的 Hook，用来处理<code>副作用</code>，最简单的用法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line"> &#125;, [count]);</span><br></pre></td></tr></table></figure><p>我们知道 useEffect 有几个特点：</p><ol><li><p>有两个参数 <code>callback</code> 和 <code>dependencies</code> 数组</p></li><li><p>如果 dependencies 不存在，那么 callback 每次 render 都会执行</p></li><li><p>如果 dependencies 存在，只有当它<code>发生了变化</code>， callback 才会执行</p></li></ol><p>实现一个 useEffect：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let _deps; &#x2F;&#x2F; _deps 记录 useEffect 上一次的 依赖</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">function useEffect(callback, depArray) &#123;</span><br><span class="line">  const hasNoDeps &#x3D; !depArray; &#x2F;&#x2F; 如果 dependencies 不存在</span><br><span class="line">  const hasChangedDeps &#x3D; _deps</span><br><span class="line">    ? !depArray.every((el, i) &#x3D;&gt; el &#x3D;&#x3D;&#x3D; _deps[i]) &#x2F;&#x2F; 两次的 dependencies 是否完全相等</span><br><span class="line">    : true;</span><br><span class="line">  &#x2F;* 如果 dependencies 不存在，或者 dependencies 有变化才执行回调函数*&#x2F;</span><br><span class="line">  if (hasNoDeps || hasChangedDeps) &#123; &#x2F;&#x2F; dependencies 不存在，或者 dependencies 有变化</span><br><span class="line">    callback();</span><br><span class="line">    _deps &#x3D; depArray;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们又实现了一个可以工作的 useEffect，似乎没有那么难。</p><p>此时我们应该可以解答一个问题：</p><blockquote><p>为什么第二个参数是空数组，相当于 componentDidMount ？</p></blockquote><p>因为依赖一直不变化，callback 不会二次执行。</p><h4 id="Hooks-的复用问题"><a href="#Hooks-的复用问题" class="headerlink" title="Hooks 的复用问题"></a>Hooks 的复用问题</h4><p>到现在为止，我们已经实现了可以工作的 useState 和 useEffect。</p><p>但是有一个很大的问题：它俩都只能<code>使用一次</code>，因为只有一个 _state 和 一个 _deps。</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [count, setCount] &#x3D; useState(0);</span><br><span class="line">const [username, setUsername] &#x3D; useState(&#39;fan&#39;);</span><br></pre></td></tr></table></figure><p>count 和 username 永远是相等的，因为他们共用了一个 _state，并没有地方能分别存储两个值。</p><p>我们需要可以<code>存储多个</code> _state 和 _deps。</p><p>如 《React Hooks: not magic, just arrays》所写，我们可以使用数组，来解决 Hooks 的复用问题。</p><p>代码关键在于：</p><p>初次渲染的时候，按照 useState，useEffect 的<code>顺序</code>，把 state，deps 等<code>按顺序塞到 memoizedState 数组</code>中。</p><p>更新的时候，<code>按照顺序</code>，从 memoizedState 中把上次记录的值拿出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let memoizedState &#x3D; []; &#x2F;&#x2F; hooks 存放在这个数组</span><br><span class="line">let cursor &#x3D; 0; &#x2F;&#x2F; 当前 memoizedState 下标</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">function useState(initialValue) &#123;</span><br><span class="line">  memoizedState[cursor] &#x3D; memoizedState[cursor] || initialValue;</span><br><span class="line">  </span><br><span class="line">  const currentCursor &#x3D; cursor; &#x2F;&#x2F; 获取当前存储memoizedState下标</span><br><span class="line">  </span><br><span class="line">  function setState(newState) &#123;</span><br><span class="line">    memoizedState[currentCursor] &#x3D; newState;</span><br><span class="line">    render();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return [memoizedState[cursor++], setState]; &#x2F;&#x2F; ++自加语法返回当前下标后 才执行加一</span><br><span class="line">  &#x2F;&#x2F; 返回当前 state，并把 cursor 加 1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">function useEffect(callback, depArray) &#123;</span><br><span class="line">  const hasNoDeps &#x3D; !depArray; &#x2F;&#x2F; 没有依赖（第二个参数）存在</span><br><span class="line">  </span><br><span class="line">  const deps &#x3D; memoizedState[cursor]; &#x2F;&#x2F; 获取当前下标的memoizedState存储的依赖</span><br><span class="line">  </span><br><span class="line">  const hasChangedDeps &#x3D; deps</span><br><span class="line">    ? !depArray.every((el, i) &#x3D;&gt; el &#x3D;&#x3D;&#x3D; deps[i]) &#x2F;&#x2F; every全部相等才会返回true</span><br><span class="line">    : true;</span><br><span class="line">  </span><br><span class="line">  if (hasNoDeps || hasChangedDeps) &#123;</span><br><span class="line">    callback();</span><br><span class="line">    memoizedState[cursor] &#x3D; depArray;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cursor++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片解读"><a href="#图片解读" class="headerlink" title="图片解读"></a>图片解读</h4><p>如果还是不清楚，可以看下面的图。</p><p>我们用图来描述 memoizedState 及 cursor 变化的过程。</p><h6 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9kak82ZjVwZW5FY3FqZGZHQzlQVHhDNVVXaE9pYmZsdFlFUFBralhReVVGVUU3aGY2VkJqZGtKTHJlNlF5WGpKT3dIZFp3V0VZUHVBQ2p4YzRncmZmYVEvNjQw?x-oss-process=image/format,png" alt=""></p><h6 id="2-初次渲染"><a href="#2-初次渲染" class="headerlink" title="2. 初次渲染"></a>2. 初次渲染</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9kak82ZjVwZW5FY3FqZGZHQzlQVHhDNVVXaE9pYmZsdFlTWVhNaFFNR2tnZ25oRDdPN1BIeWJXd1F1T3VpY0wxQlZIaHFpYlpUZ0VCSnVNdVJuM3ZwSUVzdy82NDA?x-oss-process=image/format,png" alt=""></p><h6 id="3-事件触发"><a href="#3-事件触发" class="headerlink" title="3. 事件触发"></a>3. 事件触发</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9kak82ZjVwZW5FY3FqZGZHQzlQVHhDNVVXaE9pYmZsdFlqVHNLcldYVHNlV3lKR3k0enAxNnRpY085UWJFT0wycTlSNE9RMkpTZVZlaWFpYnQyaGljaWJ6bDJFQS82NDA?x-oss-process=image/format,png" alt=""></p><h6 id="4-Re-Render"><a href="#4-Re-Render" class="headerlink" title="4. Re-Render"></a>4. Re-Render</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9kak82ZjVwZW5FY3FqZGZHQzlQVHhDNVVXaE9pYmZsdFlsdFdpYVJZeU1ZZ25oUHEzWW0wZkw3bW9yM1p5U1g3dmRLR1RpY3Z5QWlhb1UySnZHNHdadkhLMncvNjQw?x-oss-process=image/format,png" alt=""></p><p>到这里，我们实现了一个可以任意复用的 useState 和 useEffect。</p><p><code>理解：useState存的是值 useEffect存的是依赖，setState的时候改变的是闭包缓存的那个下标的memoizedState的值， 然后下标会重置为0并且组件会重新执行走一遍。一直改变的是memoizedState，而hooks只是函数会重新执行。</code></p><p>同时，也可以解答几个问题：</p><p>Q：为什么只能在函数最外层调用 Hook？为什么不要在循环、条件判断或者子函数中调用？</p><p>A：memoizedState 数组是<code>按hook定义的顺序</code>来放置数据的，如果 hook <code>顺序变化</code>，memoizedState 并<code>不会感知到</code>。</p><p>Q：自定义的 Hook 是如何影响使用它的函数组件的？</p><p>A：共享同一个 memoizedState，共享同一个顺序。</p><p>Q：”Capture Value” 特性是如何产生的？</p><p>A：每一次 ReRender 的时候，都是重新去执行函数组件了，对于之前已经执行过的函数组件，并不会做任何操作。</p><h4 id="真正的-React-实现"><a href="#真正的-React-实现" class="headerlink" title="真正的 React 实现"></a>真正的 React 实现</h4><p>虽然我们用数组基本实现了一个可用的 Hooks，了解了 Hooks 的原理，但在 React 中，实现方式却有一些差异的。</p><p>React 中是通过类似单链表的形式来代替数组的。</p><p>源码地址：<a href="https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L336" target="_blank" rel="noopener">https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L336</a></p><p>通过 next 按顺序串联所有的 hook。</p><p><a href="https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L477" target="_blank" rel="noopener">https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L477</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Hooks &#x3D; &#123;</span><br><span class="line">  memoizedState: any, &#x2F;&#x2F; 指向当前渲染节点 Fiber</span><br><span class="line">  baseState: any, &#x2F;&#x2F; 初始化 initialState， 已经每次 dispatch 之后 newState</span><br><span class="line">  baseUpdate: Update&lt;any&gt; | null,&#x2F;&#x2F; 当前需要更新的 Update ，每次更新完之后，会赋值上一个   update，方便 react 在渲染错误的边缘，数据回溯</span><br><span class="line">  queue: UpdateQueue&lt;any&gt; | null,&#x2F;&#x2F; UpdateQueue 通过</span><br><span class="line">  next: Hook | null, &#x2F;&#x2F; link 到下一个 hooks，通过 next 串联每一 hooks</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type Effect &#x3D; &#123;</span><br><span class="line">  tag: HookEffectTag, &#x2F;&#x2F; effectTag 标记当前 hook 作用在 life-cycles 的哪一个阶段</span><br><span class="line">  create: () &#x3D;&gt; mixed, &#x2F;&#x2F; 初始化 callback</span><br><span class="line">  destroy: (() &#x3D;&gt; mixed) | null, &#x2F;&#x2F; 卸载 callback</span><br><span class="line">  deps: Array&lt;mixed&gt; | null,</span><br><span class="line">  next: Effect, &#x2F;&#x2F; 同上</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>memoizedState，cursor 是存在哪里的？</p><p>如何和每个函数组件一一对应的？</p><p>我们知道，react 会生成一棵组件树（或Fiber 单链表），树中每个节点对应了一个组件。</p><p>hooks 的数据就作为组件的一个信息，存储在这些节点上，伴随组件一起出生，一起死亡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;hoos使用可能产生的疑惑&quot;&gt;&lt;a href=&quot;#hoos使用可能产生的疑惑&quot; class=&quot;headerlink&quot; title=&quot;hoos使用可能产生的疑惑&quot;&gt;&lt;/a&gt;hoos使用可能产生的疑惑&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么 useEffect 第二个
      
    
    </summary>
    
      <category term="react" scheme="https://1244832273.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://1244832273.github.io/tags/react/"/>
    
      <category term="hooks" scheme="https://1244832273.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>康奈尔笔记法</title>
    <link href="https://1244832273.github.io/2020/07/20/newType/"/>
    <id>https://1244832273.github.io/2020/07/20/newType/</id>
    <published>2020-07-20T02:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习，思维三部曲：WHAT、HOW、WHY"><a href="#学习，思维三部曲：WHAT、HOW、WHY" class="headerlink" title="学习，思维三部曲：WHAT、HOW、WHY"></a>学习，思维三部曲：WHAT、HOW、WHY</h3><h5 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h5><p>所谓的 「WHAT」 也就是 「What is it」?——这是最简单的层次。在这个层次，你要搞清楚某个东东是「什么」样子的？有「什么」用处？有「什么」特性？有「什么」语法？</p><p><code>**基本概念例如语法是什么，主要理解是什么东西！*</code>*</p><h5 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h5><p>所谓的「HOW」就是「How to do」?。在这个层次，你要搞清楚某个东西，其内部是「如何」运作的？「如何」实现的？</p><ul><li>举例如下：<br>假如你在学习 C++ 语言，你是否搞明白函数传参数的实现机制？虚函数是如何实现？抛出异常时的栈回退是怎么回事？……</li><li>假如你在学习 Java 语言，你是否搞清楚 GC 如何实现？反射是如何实现？……</li><li>假如你在学习 JDBC 库，你是否清楚 JDBC Driver 的 4 种类型？不同游标类型的实现机制？事务的机制？……</li></ul><p>在这个阶段，你必须多想想类似这些问题。然后通过各种途径，把问题彻底搞清楚。自然而然，你的提高就会比较明显。而且如果碰到一些深层次的问题（比如性能优化），也就知道该如何去解决。</p><p><code>理解是学习的这个东西如何实现的，原理是什么</code></p><h5 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h5><p>前提是理解how之后才能继续考虑why</p><p>所谓的「WHY」，就是搞清楚某个东西「为什么」设计成这样？「为什么」不是另外的样子？这样的设计有什么讲究?</p><ul><li>举例如下：<br>对于 C++ 语言：为什么 C++ 没有类似 Java 的 finally 关键字？为什么当初发明 C++ 的时候没有考虑 GC？……</li><li>对于 Java 语言：为什么 Java 没有类似 C++ 的类析构函数？为什么 Java 要同时提供 String 和 StringBuffer 两个似乎冗余的类？……</li><li>对于 Python 语言：为什么 Python 不提供类似 C++/Java 的访问控制机制？</li></ul><p><code>理解为何这样设计</code></p><h3 id="康奈尔笔记法"><a href="#康奈尔笔记法" class="headerlink" title="康奈尔笔记法"></a>康奈尔笔记法</h3><p>康奈尔笔记法，又叫5R笔记法，几乎适用于一切讲授或阅读课，特别是听课笔记。很多名校学霸在分享学习经验时，都会推荐它。</p><p>康奈尔笔记法的设计非常简单，只需要在普通的笔记本上画一横一竖两条线就可以了，具体实施步骤如下：</p><p>把笔记本纸张<strong>按照一定比例分成三个区域</strong>，分别是<strong>笔记栏</strong>、<strong>线索栏</strong>、<strong>总结栏</strong>。</p><p><img src="https://pic3.zhimg.com/80/v2-c7b5f9c9478ab9f519ae1f515994c7c2_720w.jpg" alt=""></p><p>（1）<strong>记录</strong>：在听讲或阅读过程中，在笔记栏内尽量多记论据、概念等内容。</p><p>（2）<strong>简化</strong>：将这些论据、概念简明扼要地概括在线索栏。</p><p>（3）<strong>背诵</strong>：把笔记栏遮住，只用线索栏中的摘要提示，回忆笔记栏内容。</p><p>（4）<strong>思考</strong>：将随感、思考、体会的内容，写在下方总结栏处。</p><p>（5）<strong>复习</strong>：每周花一定时间复习笔记，翻看总结栏，检查自己对知识点是否都已熟练掌握，如有未能掌握扎实的内容，再回去看笔记栏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习，思维三部曲：WHAT、HOW、WHY&quot;&gt;&lt;a href=&quot;#学习，思维三部曲：WHAT、HOW、WHY&quot; class=&quot;headerlink&quot; title=&quot;学习，思维三部曲：WHAT、HOW、WHY&quot;&gt;&lt;/a&gt;学习，思维三部曲：WHAT、HOW、WHY&lt;/
      
    
    </summary>
    
      <category term="学习方法" scheme="https://1244832273.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="学习方法" scheme="https://1244832273.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>测试#文章页面上的显示名称，一般是中文</title>
    <link href="https://1244832273.github.io/2020/07/19/my-first-blog/"/>
    <id>https://1244832273.github.io/2020/07/19/my-first-blog/</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-07-31T10:37:11.369Z</updated>
    
    <content type="html"><![CDATA[<p>测试内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">console.log(&#39;你好&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>[TOC]</p><p><img src="G:\塔河大屏综合管理平台_slices\合并形状备份 2@2x.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="默认分类" scheme="https://1244832273.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
</feed>
